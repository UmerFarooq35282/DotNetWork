#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExclServicess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ExcellOnService")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTblEmployee(TblEmployee instance);
    partial void UpdateTblEmployee(TblEmployee instance);
    partial void DeleteTblEmployee(TblEmployee instance);
    partial void InsertTblClient(TblClient instance);
    partial void UpdateTblClient(TblClient instance);
    partial void DeleteTblClient(TblClient instance);
    partial void InsertSubService(SubService instance);
    partial void UpdateSubService(SubService instance);
    partial void DeleteSubService(SubService instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertPymentDetail(PymentDetail instance);
    partial void UpdatePymentDetail(PymentDetail instance);
    partial void DeletePymentDetail(PymentDetail instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertCartsDetail(CartsDetail instance);
    partial void UpdateCartsDetail(CartsDetail instance);
    partial void DeleteCartsDetail(CartsDetail instance);
    #endregion
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TblEmployee> TblEmployees
		{
			get
			{
				return this.GetTable<TblEmployee>();
			}
		}
		
		public System.Data.Linq.Table<TblClient> TblClients
		{
			get
			{
				return this.GetTable<TblClient>();
			}
		}
		
		public System.Data.Linq.Table<SubService> SubServices
		{
			get
			{
				return this.GetTable<SubService>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<PymentDetail> PymentDetails
		{
			get
			{
				return this.GetTable<PymentDetail>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<CartsDetail> CartsDetails
		{
			get
			{
				return this.GetTable<CartsDetail>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblEmployee")]
	public partial class TblEmployee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Email;
		
		private string _Address;
		
		private string _Password;
		
		private string _CPassword;
		
		private string _City;
		
		private string _Image;
		
		private string _RoleEmploye;
		
		private float _Salary;
		
		private string _PhoneNumber;
		
		private int _DepartmentId;
		
		private int _ServiceId;
		
		private EntityRef<Service> _Service;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnCPasswordChanging(string value);
    partial void OnCPasswordChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnRoleEmployeChanging(string value);
    partial void OnRoleEmployeChanged();
    partial void OnSalaryChanging(float value);
    partial void OnSalaryChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnDepartmentIdChanging(int value);
    partial void OnDepartmentIdChanged();
    partial void OnServiceIdChanging(int value);
    partial void OnServiceIdChanged();
    #endregion
		
		public TblEmployee()
		{
			this._Service = default(EntityRef<Service>);
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CPassword", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CPassword
		{
			get
			{
				return this._CPassword;
			}
			set
			{
				if ((this._CPassword != value))
				{
					this.OnCPasswordChanging(value);
					this.SendPropertyChanging();
					this._CPassword = value;
					this.SendPropertyChanged("CPassword");
					this.OnCPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleEmploye", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string RoleEmploye
		{
			get
			{
				return this._RoleEmploye;
			}
			set
			{
				if ((this._RoleEmploye != value))
				{
					this.OnRoleEmployeChanging(value);
					this.SendPropertyChanging();
					this._RoleEmploye = value;
					this.SendPropertyChanged("RoleEmploye");
					this.OnRoleEmployeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="Real NOT NULL")]
		public float Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", DbType="Int NOT NULL")]
		public int DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceId", DbType="Int NOT NULL")]
		public int ServiceId
		{
			get
			{
				return this._ServiceId;
			}
			set
			{
				if ((this._ServiceId != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceId = value;
					this.SendPropertyChanged("ServiceId");
					this.OnServiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_TblEmployee", Storage="_Service", ThisKey="ServiceId", OtherKey="ServiceId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.TblEmployees.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.TblEmployees.Add(this);
						this._ServiceId = value.ServiceId;
					}
					else
					{
						this._ServiceId = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_TblEmployee", Storage="_Department", ThisKey="DepartmentId", OtherKey="DepartmentId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.TblEmployees.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.TblEmployees.Add(this);
						this._DepartmentId = value.DepartmentId;
					}
					else
					{
						this._DepartmentId = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblClient")]
	public partial class TblClient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientId;
		
		private string _ClientName;
		
		private string _ClientEmail;
		
		private string _ClientPhoto;
		
		private string _ClientAddress;
		
		private string _ClientPhone;
		
		private string _ClientPassword;
		
		private string _ClientCPassword;
		
		private EntitySet<PymentDetail> _PymentDetails;
		
		private EntitySet<CartsDetail> _CartsDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnClientEmailChanging(string value);
    partial void OnClientEmailChanged();
    partial void OnClientPhotoChanging(string value);
    partial void OnClientPhotoChanged();
    partial void OnClientAddressChanging(string value);
    partial void OnClientAddressChanged();
    partial void OnClientPhoneChanging(string value);
    partial void OnClientPhoneChanged();
    partial void OnClientPasswordChanging(string value);
    partial void OnClientPasswordChanged();
    partial void OnClientCPasswordChanging(string value);
    partial void OnClientCPasswordChanged();
    #endregion
		
		public TblClient()
		{
			this._PymentDetails = new EntitySet<PymentDetail>(new Action<PymentDetail>(this.attach_PymentDetails), new Action<PymentDetail>(this.detach_PymentDetails));
			this._CartsDetails = new EntitySet<CartsDetail>(new Action<CartsDetail>(this.attach_CartsDetails), new Action<CartsDetail>(this.detach_CartsDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientEmail", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ClientEmail
		{
			get
			{
				return this._ClientEmail;
			}
			set
			{
				if ((this._ClientEmail != value))
				{
					this.OnClientEmailChanging(value);
					this.SendPropertyChanging();
					this._ClientEmail = value;
					this.SendPropertyChanged("ClientEmail");
					this.OnClientEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientPhoto", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ClientPhoto
		{
			get
			{
				return this._ClientPhoto;
			}
			set
			{
				if ((this._ClientPhoto != value))
				{
					this.OnClientPhotoChanging(value);
					this.SendPropertyChanging();
					this._ClientPhoto = value;
					this.SendPropertyChanged("ClientPhoto");
					this.OnClientPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientAddress", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ClientAddress
		{
			get
			{
				return this._ClientAddress;
			}
			set
			{
				if ((this._ClientAddress != value))
				{
					this.OnClientAddressChanging(value);
					this.SendPropertyChanging();
					this._ClientAddress = value;
					this.SendPropertyChanged("ClientAddress");
					this.OnClientAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientPhone", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ClientPhone
		{
			get
			{
				return this._ClientPhone;
			}
			set
			{
				if ((this._ClientPhone != value))
				{
					this.OnClientPhoneChanging(value);
					this.SendPropertyChanging();
					this._ClientPhone = value;
					this.SendPropertyChanged("ClientPhone");
					this.OnClientPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientPassword", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ClientPassword
		{
			get
			{
				return this._ClientPassword;
			}
			set
			{
				if ((this._ClientPassword != value))
				{
					this.OnClientPasswordChanging(value);
					this.SendPropertyChanging();
					this._ClientPassword = value;
					this.SendPropertyChanged("ClientPassword");
					this.OnClientPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientCPassword", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ClientCPassword
		{
			get
			{
				return this._ClientCPassword;
			}
			set
			{
				if ((this._ClientCPassword != value))
				{
					this.OnClientCPasswordChanging(value);
					this.SendPropertyChanging();
					this._ClientCPassword = value;
					this.SendPropertyChanged("ClientCPassword");
					this.OnClientCPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblClient_PymentDetail", Storage="_PymentDetails", ThisKey="ClientId", OtherKey="ClientId")]
		public EntitySet<PymentDetail> PymentDetails
		{
			get
			{
				return this._PymentDetails;
			}
			set
			{
				this._PymentDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblClient_CartsDetail", Storage="_CartsDetails", ThisKey="ClientId", OtherKey="ClientId")]
		public EntitySet<CartsDetail> CartsDetails
		{
			get
			{
				return this._CartsDetails;
			}
			set
			{
				this._CartsDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PymentDetails(PymentDetail entity)
		{
			this.SendPropertyChanging();
			entity.TblClient = this;
		}
		
		private void detach_PymentDetails(PymentDetail entity)
		{
			this.SendPropertyChanging();
			entity.TblClient = null;
		}
		
		private void attach_CartsDetails(CartsDetail entity)
		{
			this.SendPropertyChanging();
			entity.TblClient = this;
		}
		
		private void detach_CartsDetails(CartsDetail entity)
		{
			this.SendPropertyChanging();
			entity.TblClient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubServices")]
	public partial class SubService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubServiceId;
		
		private string _SubServiceName;
		
		private string _ServiceImage;
		
		private string _SubServiceDescription;
		
		private string _SubServiceCode;
		
		private int _SubServiceCharges;
		
		private int _ServiceId;
		
		private EntitySet<CartsDetail> _CartsDetails;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubServiceIdChanging(int value);
    partial void OnSubServiceIdChanged();
    partial void OnSubServiceNameChanging(string value);
    partial void OnSubServiceNameChanged();
    partial void OnServiceImageChanging(string value);
    partial void OnServiceImageChanged();
    partial void OnSubServiceDescriptionChanging(string value);
    partial void OnSubServiceDescriptionChanged();
    partial void OnSubServiceCodeChanging(string value);
    partial void OnSubServiceCodeChanged();
    partial void OnSubServiceChargesChanging(int value);
    partial void OnSubServiceChargesChanged();
    partial void OnServiceIdChanging(int value);
    partial void OnServiceIdChanged();
    #endregion
		
		public SubService()
		{
			this._CartsDetails = new EntitySet<CartsDetail>(new Action<CartsDetail>(this.attach_CartsDetails), new Action<CartsDetail>(this.detach_CartsDetails));
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubServiceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubServiceId
		{
			get
			{
				return this._SubServiceId;
			}
			set
			{
				if ((this._SubServiceId != value))
				{
					this.OnSubServiceIdChanging(value);
					this.SendPropertyChanging();
					this._SubServiceId = value;
					this.SendPropertyChanged("SubServiceId");
					this.OnSubServiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubServiceName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SubServiceName
		{
			get
			{
				return this._SubServiceName;
			}
			set
			{
				if ((this._SubServiceName != value))
				{
					this.OnSubServiceNameChanging(value);
					this.SendPropertyChanging();
					this._SubServiceName = value;
					this.SendPropertyChanged("SubServiceName");
					this.OnSubServiceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceImage", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ServiceImage
		{
			get
			{
				return this._ServiceImage;
			}
			set
			{
				if ((this._ServiceImage != value))
				{
					this.OnServiceImageChanging(value);
					this.SendPropertyChanging();
					this._ServiceImage = value;
					this.SendPropertyChanged("ServiceImage");
					this.OnServiceImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubServiceDescription", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SubServiceDescription
		{
			get
			{
				return this._SubServiceDescription;
			}
			set
			{
				if ((this._SubServiceDescription != value))
				{
					this.OnSubServiceDescriptionChanging(value);
					this.SendPropertyChanging();
					this._SubServiceDescription = value;
					this.SendPropertyChanged("SubServiceDescription");
					this.OnSubServiceDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubServiceCode", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SubServiceCode
		{
			get
			{
				return this._SubServiceCode;
			}
			set
			{
				if ((this._SubServiceCode != value))
				{
					this.OnSubServiceCodeChanging(value);
					this.SendPropertyChanging();
					this._SubServiceCode = value;
					this.SendPropertyChanged("SubServiceCode");
					this.OnSubServiceCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubServiceCharges", DbType="Int NOT NULL")]
		public int SubServiceCharges
		{
			get
			{
				return this._SubServiceCharges;
			}
			set
			{
				if ((this._SubServiceCharges != value))
				{
					this.OnSubServiceChargesChanging(value);
					this.SendPropertyChanging();
					this._SubServiceCharges = value;
					this.SendPropertyChanged("SubServiceCharges");
					this.OnSubServiceChargesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceId", DbType="Int NOT NULL")]
		public int ServiceId
		{
			get
			{
				return this._ServiceId;
			}
			set
			{
				if ((this._ServiceId != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceId = value;
					this.SendPropertyChanged("ServiceId");
					this.OnServiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubService_CartsDetail", Storage="_CartsDetails", ThisKey="SubServiceId", OtherKey="SubServiceId")]
		public EntitySet<CartsDetail> CartsDetails
		{
			get
			{
				return this._CartsDetails;
			}
			set
			{
				this._CartsDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_SubService", Storage="_Service", ThisKey="ServiceId", OtherKey="ServiceId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.SubServices.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.SubServices.Add(this);
						this._ServiceId = value.ServiceId;
					}
					else
					{
						this._ServiceId = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CartsDetails(CartsDetail entity)
		{
			this.SendPropertyChanging();
			entity.SubService = this;
		}
		
		private void detach_CartsDetails(CartsDetail entity)
		{
			this.SendPropertyChanging();
			entity.SubService = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Services")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceId;
		
		private string _ServiceName;
		
		private string _MainServiceImg;
		
		private string _ServiceDescription;
		
		private string _ServiceCode;
		
		private int _ServiceCharges;
		
		private EntitySet<TblEmployee> _TblEmployees;
		
		private EntitySet<SubService> _SubServices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceIdChanging(int value);
    partial void OnServiceIdChanged();
    partial void OnServiceNameChanging(string value);
    partial void OnServiceNameChanged();
    partial void OnMainServiceImgChanging(string value);
    partial void OnMainServiceImgChanged();
    partial void OnServiceDescriptionChanging(string value);
    partial void OnServiceDescriptionChanged();
    partial void OnServiceCodeChanging(string value);
    partial void OnServiceCodeChanged();
    partial void OnServiceChargesChanging(int value);
    partial void OnServiceChargesChanged();
    #endregion
		
		public Service()
		{
			this._TblEmployees = new EntitySet<TblEmployee>(new Action<TblEmployee>(this.attach_TblEmployees), new Action<TblEmployee>(this.detach_TblEmployees));
			this._SubServices = new EntitySet<SubService>(new Action<SubService>(this.attach_SubServices), new Action<SubService>(this.detach_SubServices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ServiceId
		{
			get
			{
				return this._ServiceId;
			}
			set
			{
				if ((this._ServiceId != value))
				{
					this.OnServiceIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceId = value;
					this.SendPropertyChanged("ServiceId");
					this.OnServiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ServiceName
		{
			get
			{
				return this._ServiceName;
			}
			set
			{
				if ((this._ServiceName != value))
				{
					this.OnServiceNameChanging(value);
					this.SendPropertyChanging();
					this._ServiceName = value;
					this.SendPropertyChanged("ServiceName");
					this.OnServiceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainServiceImg", DbType="NVarChar(MAX)")]
		public string MainServiceImg
		{
			get
			{
				return this._MainServiceImg;
			}
			set
			{
				if ((this._MainServiceImg != value))
				{
					this.OnMainServiceImgChanging(value);
					this.SendPropertyChanging();
					this._MainServiceImg = value;
					this.SendPropertyChanged("MainServiceImg");
					this.OnMainServiceImgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceDescription", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ServiceDescription
		{
			get
			{
				return this._ServiceDescription;
			}
			set
			{
				if ((this._ServiceDescription != value))
				{
					this.OnServiceDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ServiceDescription = value;
					this.SendPropertyChanged("ServiceDescription");
					this.OnServiceDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceCode", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ServiceCode
		{
			get
			{
				return this._ServiceCode;
			}
			set
			{
				if ((this._ServiceCode != value))
				{
					this.OnServiceCodeChanging(value);
					this.SendPropertyChanging();
					this._ServiceCode = value;
					this.SendPropertyChanged("ServiceCode");
					this.OnServiceCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceCharges", DbType="Int NOT NULL")]
		public int ServiceCharges
		{
			get
			{
				return this._ServiceCharges;
			}
			set
			{
				if ((this._ServiceCharges != value))
				{
					this.OnServiceChargesChanging(value);
					this.SendPropertyChanging();
					this._ServiceCharges = value;
					this.SendPropertyChanged("ServiceCharges");
					this.OnServiceChargesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_TblEmployee", Storage="_TblEmployees", ThisKey="ServiceId", OtherKey="ServiceId")]
		public EntitySet<TblEmployee> TblEmployees
		{
			get
			{
				return this._TblEmployees;
			}
			set
			{
				this._TblEmployees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_SubService", Storage="_SubServices", ThisKey="ServiceId", OtherKey="ServiceId")]
		public EntitySet<SubService> SubServices
		{
			get
			{
				return this._SubServices;
			}
			set
			{
				this._SubServices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblEmployees(TblEmployee entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_TblEmployees(TblEmployee entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_SubServices(SubService entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_SubServices(SubService entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PymentDetail")]
	public partial class PymentDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PaymentId;
		
		private string _CardType;
		
		private string _CardNumber;
		
		private string _CardCvv;
		
		private string _Address;
		
		private int _ClientId;
		
		private EntityRef<TblClient> _TblClient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentIdChanging(int value);
    partial void OnPaymentIdChanged();
    partial void OnCardTypeChanging(string value);
    partial void OnCardTypeChanged();
    partial void OnCardNumberChanging(string value);
    partial void OnCardNumberChanged();
    partial void OnCardCvvChanging(string value);
    partial void OnCardCvvChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    #endregion
		
		public PymentDetail()
		{
			this._TblClient = default(EntityRef<TblClient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PaymentId
		{
			get
			{
				return this._PaymentId;
			}
			set
			{
				if ((this._PaymentId != value))
				{
					this.OnPaymentIdChanging(value);
					this.SendPropertyChanging();
					this._PaymentId = value;
					this.SendPropertyChanged("PaymentId");
					this.OnPaymentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardType", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string CardType
		{
			get
			{
				return this._CardType;
			}
			set
			{
				if ((this._CardType != value))
				{
					this.OnCardTypeChanging(value);
					this.SendPropertyChanging();
					this._CardType = value;
					this.SendPropertyChanged("CardType");
					this.OnCardTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardNumber", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CardNumber
		{
			get
			{
				return this._CardNumber;
			}
			set
			{
				if ((this._CardNumber != value))
				{
					this.OnCardNumberChanging(value);
					this.SendPropertyChanging();
					this._CardNumber = value;
					this.SendPropertyChanged("CardNumber");
					this.OnCardNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardCvv", DbType="NVarChar(3) NOT NULL", CanBeNull=false)]
		public string CardCvv
		{
			get
			{
				return this._CardCvv;
			}
			set
			{
				if ((this._CardCvv != value))
				{
					this.OnCardCvvChanging(value);
					this.SendPropertyChanging();
					this._CardCvv = value;
					this.SendPropertyChanged("CardCvv");
					this.OnCardCvvChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int NOT NULL")]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._TblClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblClient_PymentDetail", Storage="_TblClient", ThisKey="ClientId", OtherKey="ClientId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TblClient TblClient
		{
			get
			{
				return this._TblClient.Entity;
			}
			set
			{
				TblClient previousValue = this._TblClient.Entity;
				if (((previousValue != value) 
							|| (this._TblClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblClient.Entity = null;
						previousValue.PymentDetails.Remove(this);
					}
					this._TblClient.Entity = value;
					if ((value != null))
					{
						value.PymentDetails.Add(this);
						this._ClientId = value.ClientId;
					}
					else
					{
						this._ClientId = default(int);
					}
					this.SendPropertyChanged("TblClient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Departments")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepartmentId;
		
		private string _DepartmentName;
		
		private EntitySet<TblEmployee> _TblEmployees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIdChanging(int value);
    partial void OnDepartmentIdChanged();
    partial void OnDepartmentNameChanging(string value);
    partial void OnDepartmentNameChanged();
    #endregion
		
		public Department()
		{
			this._TblEmployees = new EntitySet<TblEmployee>(new Action<TblEmployee>(this.attach_TblEmployees), new Action<TblEmployee>(this.detach_TblEmployees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string DepartmentName
		{
			get
			{
				return this._DepartmentName;
			}
			set
			{
				if ((this._DepartmentName != value))
				{
					this.OnDepartmentNameChanging(value);
					this.SendPropertyChanging();
					this._DepartmentName = value;
					this.SendPropertyChanged("DepartmentName");
					this.OnDepartmentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_TblEmployee", Storage="_TblEmployees", ThisKey="DepartmentId", OtherKey="DepartmentId")]
		public EntitySet<TblEmployee> TblEmployees
		{
			get
			{
				return this._TblEmployees;
			}
			set
			{
				this._TblEmployees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblEmployees(TblEmployee entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_TblEmployees(TblEmployee entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CartsDetail")]
	public partial class CartsDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CartId;
		
		private int _SubServiceId;
		
		private int _ClientId;
		
		private EntityRef<SubService> _SubService;
		
		private EntityRef<TblClient> _TblClient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCartIdChanging(int value);
    partial void OnCartIdChanged();
    partial void OnSubServiceIdChanging(int value);
    partial void OnSubServiceIdChanged();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    #endregion
		
		public CartsDetail()
		{
			this._SubService = default(EntityRef<SubService>);
			this._TblClient = default(EntityRef<TblClient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CartId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CartId
		{
			get
			{
				return this._CartId;
			}
			set
			{
				if ((this._CartId != value))
				{
					this.OnCartIdChanging(value);
					this.SendPropertyChanging();
					this._CartId = value;
					this.SendPropertyChanged("CartId");
					this.OnCartIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubServiceId", DbType="Int NOT NULL")]
		public int SubServiceId
		{
			get
			{
				return this._SubServiceId;
			}
			set
			{
				if ((this._SubServiceId != value))
				{
					if (this._SubService.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubServiceIdChanging(value);
					this.SendPropertyChanging();
					this._SubServiceId = value;
					this.SendPropertyChanged("SubServiceId");
					this.OnSubServiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int NOT NULL")]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._TblClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubService_CartsDetail", Storage="_SubService", ThisKey="SubServiceId", OtherKey="SubServiceId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SubService SubService
		{
			get
			{
				return this._SubService.Entity;
			}
			set
			{
				SubService previousValue = this._SubService.Entity;
				if (((previousValue != value) 
							|| (this._SubService.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubService.Entity = null;
						previousValue.CartsDetails.Remove(this);
					}
					this._SubService.Entity = value;
					if ((value != null))
					{
						value.CartsDetails.Add(this);
						this._SubServiceId = value.SubServiceId;
					}
					else
					{
						this._SubServiceId = default(int);
					}
					this.SendPropertyChanged("SubService");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblClient_CartsDetail", Storage="_TblClient", ThisKey="ClientId", OtherKey="ClientId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TblClient TblClient
		{
			get
			{
				return this._TblClient.Entity;
			}
			set
			{
				TblClient previousValue = this._TblClient.Entity;
				if (((previousValue != value) 
							|| (this._TblClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblClient.Entity = null;
						previousValue.CartsDetails.Remove(this);
					}
					this._TblClient.Entity = value;
					if ((value != null))
					{
						value.CartsDetails.Add(this);
						this._ClientId = value.ClientId;
					}
					else
					{
						this._ClientId = default(int);
					}
					this.SendPropertyChanged("TblClient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
